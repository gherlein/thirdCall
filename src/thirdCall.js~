//  “Copyright Amazon.com Inc. or its affiliates.”
const AWS = require("aws-sdk");
const chill = require("./chill/chill.js");

const wavFileBucket = process.env["WAVFILE_BUCKET"];
const callInfoTable = process.env["CALLINFO_TABLE_NAME"];
const REGION = process.env.REGION;

const s3 = new AWS.S3();


const transcribeClient = new AWS.TranscribeService({
  signatureVersion: "v4",
  region: REGION,
});

var documentClient = new AWS.DynamoDB.DocumentClient();

exports.handler = async (event, context, callback) => {
  console.log(JSON.stringify(event));
  let actions;

  switch (event.InvocationEventType) {
    case "NEW_INBOUND_CALL":
      //            console.log("NEW_INBOUND_CALL");
      actions = await newCall(event);
      break;

    case "ACTION_SUCCESSFUL":
      //            console.log("SUCCESS ACTION");
      actions = [hangupAction];
      break;

    case "HANGUP":
      //            console.log("HANGUP ACTION");
      actions = [];
      break;

    case "CALL_ANSWERED":
      //            console.log("CALL ANSWERED")
      actions = [];
      break;

    default:
      //            console.log("FAILED ACTION");
      actions = [hangupAction];
  }

  const response = {
    SchemaVersion: "1.0",
    Actions: actions,
  };

  callback(null, response);
};

const announcementsKeyPrefix = "announcements/";

async function newCall(event) {
  const callInfo = await getCaller(event.CallDetails.Participants.From);
  console.log({ event });
  const s3EntranceKeyName = announcementsKeyPrefix + "/entrance.wav";

  d = new Date();
  h = d.getHours();
  m = d.getMinutes();
  console.log(h.toString() + m.toString());
  phrase = "nothing";

  if (callInfo.phoneNumber) {
    const phrase =
      "<speak>Welcome back!</emphasis><break/>The time is" +
      h.toString() +
      m.toString() +
      "U C T<break/>.  <emphasis>Goodbye</emphasis></speak>";
  } else {
    const phrase =
      "<speak>Welcome " +
      callInfo.phoneNumber +
      "<emphasis>.</emphasis><break/>The time is" +
      h.toString() +
      m.toString() +
      "U C T<break/>.  <emphasis>Goodbye</emphasis></speak>";
    putCaller(
      event.CallDetails.Participants.From,
      event.CallDetails.Participants.CallId,
      event.CallDetails.Participants.StartTimeInMilliseconds
    );
  }

  console.log("synthesizing voice to " + s3EntranceKeyName);
  console.log("phrase is " + phrase);
  await chill.synthesizeWelcomeSpeech(
    wavFileBucket,
    s3EntranceKeyName,
    phrase
  );
  console.log("calling playAudioAction");
  playAudioAction.Parameters.AudioSource.Key = s3EntranceKeyName;
  return [playAudioAction];
}

const hangupAction = {
  Type: "Hangup",
  Parameters: {
    SipResponseCode: "0",
    ParticipantTag: "",
  },
};

const playAudioAction = {
  Type: "PlayAudio",
  Parameters: {
    AudioSource: {
      Type: "S3",
      BucketName: wavFileBucket,
      Key: "",
    },
  },
};

const pauseAction = {
  Type: "Pause",
  Parameters: {
    DurationInMilliseconds: "1000",
  },
};

async function putCaller(phoneNumber, id, startTime) {
  var params = {
    TableName: callInfoTable,
    Item: {
      phoneNumber: phoneNumber,
      id: id,
      startTime: startTime,
    },
  };

  try {
    const results = await documentClient.put(params).promise();
    console.log(results);
    return results;
  } catch (err) {
    console.log(err);
    return err;
  }
}

async function getCaller(callInfo) {
  var params = {
    TableName: callInfoTable,
    Key: { phoneNumber: callInfo },
  };

  console.log(params);
  try {
    const results = await documentClient.get(params).promise();
    console.log(results);
    if (results) {
      const callInfo = {
        phoneNumber: results.Item.phoneNumber,
        startTime: results.Item.startTime,
        id: results.Item.id,
      };
      console.log({ callInfo });
      return callInfo;
    } else {
      console.log("phone number not found");
      return false;
    }
  } catch (err) {
    console.log(err);
    console.log("No phone found");
    return false;
  }
}
